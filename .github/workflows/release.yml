name: Go Build & Release

# This workflow triggers when a new Git tag is pushed to the repository.
# The tag name must start with 'v' followed by numbers and dots (e.g., v1.0.0, v1.2.3-beta).
on:
  push:
    tags:
      - 'v*.*.*'

jobs:
  build:
    runs-on: ubuntu-latest

    # Crucial: Grant write permissions to the GITHUB_TOKEN for creating and uploading releases.
    permissions:
      contents: write

    steps:
      # Step 1: Checkout the source code from the repository.
      - name: Checkout code
        uses: actions/checkout@v4

      # Step 2: Set up the Go environment.
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.22'

      # Step 3: Get the Git tag/version information.
      - name: Get tag and version information
        id: get_version
        run: |
          echo "RELEASE_TAG=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV
          echo "VERSION=$(git describe --tags --always --dirty="-dev" --abbrev=7)" >> $GITHUB_ENV
        shell: bash

      # Step 4: Build shcron for various operating systems and architectures (Cross-compilation).
      - name: Build for Linux (amd64)
        run: CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -ldflags "-s -w -X main.version=${{ env.VERSION }}" -o shcron_linux_amd64 ./cmd/shcron

      - name: Build for Linux (arm64)
        run: CGO_ENABLED=0 GOOS=linux GOARCH=arm64 go build -ldflags "-s -w -X main.version=${{ env.VERSION }}" -o shcron_linux_arm64 ./cmd/shcron

      - name: Build for Windows (amd64)
        run: CGO_ENABLED=0 GOOS=windows GOARCH=amd64 go build -ldflags "-s -w -X main.version=${{ env.VERSION }}" -o shcron_windows_amd64.exe ./cmd/shcron

      - name: Build for macOS (amd64 - Intel)
        run: CGO_ENABLED=0 GOOS=darwin GOARCH=amd64 go build -ldflags "-s -w -X main.version=${{ env.VERSION }}" -o shcron_darwin_amd64 ./cmd/shcron

      - name: Build for macOS (arm64 - Apple Silicon)
        run: CGO_ENABLED=0 GOOS=darwin GOARCH=arm64 go build -ldflags "-s -w -X main.version=${{ env.VERSION }}" -o shcron_darwin_arm64 ./cmd/shcron

      # Step 5: Calculate SHA256 checksums for all executables directly.
      - name: Calculate Checksums
        run: |
          sha256sum shcron_linux_amd64 shcron_linux_arm64 shcron_windows_amd64.exe shcron_darwin_amd64 shcron_darwin_arm64 > SHA256SUMS
        shell: bash

      # Step 6: Create GitHub Release and Upload Assets (Consolidated Step)
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.RELEASE_TAG }}
          name: Release ${{ env.RELEASE_TAG }}
          body: |
            ## shcron ${{ env.RELEASE_TAG }}

            This is a new release of `shcron` with various improvements and bug fixes.

            ### Key Changes:
            - Added support for cron patterns.
            - Implemented flexible `--until` date parsing.
            - Improved code organization and testability.
            - Fixed file descriptor leak in long-running jobs.

            ### Download Assets:
            Choose the appropriate executable for your operating system and architecture below.
            (No archiving, direct executables provided.)
          draft: false
          prerelease: false
          # Define the executable files to upload as release assets.
          files: |
            shcron_linux_amd64
            shcron_linux_arm64
            shcron_windows_amd64.exe
            shcron_darwin_amd64
            shcron_darwin_arm64
            SHA256SUMS
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}